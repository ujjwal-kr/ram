main:
    ram labelMap :map
    ram stack :vec :int = []
    ram i :int = 0
    ram lxstring = "./examples/interpreter/test.txt"
    stdfs open lxstring = string
    ram program :vec :str = []
    ram plen :int = 0 
    split string > "\n" = program
    vec program len
    ram lx prev
    copy plen = lx
    jmp main_loop:
    halt

main_loop:
    ram statement :str = ""
    vec statement = program[i]
    trim statement

    jmp parser_prolog:

    ram lx 1
    add i lx
    ram lx prev
    copy i = lx
    
    jmp match:

    cmp plen i
    jne main_loop:
    ret

parser_prolog:
    ram instructions :vec :str = []
    ram chars :vec :str = []
    split statement > "" = chars
    vec chars len
    ram 0
    cmp
    jne parser_label:
    ret

parser_label:
    vec chars len
    ram 1
    sub
    ram lx prev
    ram col :str = ""
    vec col = chars[lx]
    ram string = ":"
    cmp col string
    je add_label:

    cmp col string
    jne push_instruction:
    drop chars
    ret

push_instruction:
    print bruh
    vec instructions push statement
    ret

add_label:
    insert labelMap { statement: i}
    ret

match:
    ram matchstr :str = ""
    ram cmd :vec :str = [] 
    split statement > " " = cmd
    vec matchstr = cmd[0]

    ram string = "push"
    cmp string matchstr
    je push:

    ram string = "print"
    cmp string matchstr
    je print:

    ram string = "add"
    cmp string matchstr
    je add:

    ram string = "sub"
    cmp string matchstr
    je sub:

    ram string = "mul"
    cmp string matchstr
    je mul:

    ram string = "div"
    cmp string matchstr
    je div:

    ram string = "pop"
    cmp string matchstr
    je pop:

    ram string = "cmp"
    cmp string matchstr
    je cmp:

    ret

push:
    ram numstr :str = ""
    vec numstr = cmd[1]
    parse numstr :int
    vec stack push lx
    drop numstr
    ret

pop:
    vec stack pop
    ret

print:
    vec stack len
    ram 1
    sub
    ram lx prev
    ram num :int = 0
    vec num = stack[lx]
    print var num
    drop num
    ret

get_last_two:
    ram n1 :int = 0
    ram n2 :int = 0
    vec stack len
    ram 1
    sub
    ram lx prev
    vec n1 = stack[lx]
    vec stack len
    ram 2
    sub
    ram lx prev
    vec n2 = stack[lx]
    ret

add:
    jmp get_last_two:
    add n1 n2
    ram lx prev
    vec stack push lx
    drop n1
    drop n2
    ret

sub:
    jmp get_last_two:
    sub n2 n1
    ram lx prev
    vec stack push lx
    drop n1
    drop n2
    ret

cmp:
    jmp get_last_two:
    
    cmp n2 n1
    jgr cmp_gr:
    
    cmp n2 n1
    je cmp_je:

    cmp n2 n1
    jsm cmp_sm:
    drop n1
    drop n2 
    ret

cmp_gr:
    ram lx 1
    vec stack push lx
    ret

cmp_je:
    ram lx 0
    vec stack push lx
    ret

cmp_sm:
    ram lx -1
    vec stack push lx
    ret