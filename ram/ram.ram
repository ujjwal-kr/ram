stdfs open >> ./ram/test.txt
split string >> "\n"
var stack int vec >> [0]
var i int >> 0
jmp 1

// loop through the program [1]
vec str len
ram var i
cmp
jne 2

// init router [2]
// send command to cmd vec
var cmd str vec >> [nil]
move vec var cmd vec str
var cmd str vec string >> [var i]
// call lexer + parser
jmp 3
// increment the loop
ram 1
ram var i
add
ram var i prev
jmp 1

// main router [3]
split string >> " "
vec str >> [0]
ram lxstring >> ram
// compare for "ram"
str cmp
je 4
ram lxstring >> pop
// compare for "pop"
str cmp
je 5
ram lxstring >> print
// compare for print
str cmp
je 6
ram lxstring >> add
// compare for "add"
str cmp
je 7
ram lxstring >> sub
// compare for "sub"
str cmp
je 8

// ram func [4]
printc >> ram function called
vec str string >> [1]
parse int lx string
var stack int vec push >> lx

// pop func [5]
printc >> pop func called

// print func [6]
printc >> print func called
var stack int vec len
ram 1
sub
ram lx prev
// store the last item of stack in string
var stack int vec rv >> [lx]
print rv

// add func [7]
printc >> add func called

// sub func [8]
printc >> sub func called